package com.outbrain.ob1k.crud

import com.google.gson.JsonObject
import com.outbrain.ob1k.concurrent.ComposableFuture
import com.outbrain.ob1k.concurrent.ComposableFutures
import com.outbrain.ob1k.crud.dao.EntityFieldMapper
import com.outbrain.ob1k.crud.dao.ICrudAsyncDao
import com.outbrain.ob1k.crud.dao.MySQLCrudDao
import com.outbrain.ob1k.crud.model.EntityDescription
import com.outbrain.ob1k.crud.model.EntityField
import com.outbrain.ob1k.crud.model.Model
import com.outbrain.ob1k.crud.service.CrudService
import com.outbrain.ob1k.crud.service.ModelService
import com.outbrain.ob1k.db.BasicDao

class CrudApplication(private val dao: BasicDao? = null,
                      commaDelimitedTables: String = "") {
    private val tables = commaDelimitedTables.split(",")
    var model = Model()

    init {
        dao?.let { withTableInfo(dao, tables).get() }
    }

    private fun withTableInfo(dao: BasicDao, tables: List<String>) = ComposableFutures.foreach(tables, this, { table, _ -> withTableInfo(dao, table) })

    private fun withTableInfo(dao: BasicDao, table: String): ComposableFuture<CrudApplication> {
        return dao.list("SHOW COLUMNS FROM $table", EntityFieldMapper())
                .map { EntityDescription(table = table, id = model.total, fields = it) }
                .map { withEntity(it) }
    }

    fun withEntity(resourceName: String, fields: List<EntityField>) = withEntity(EntityDescription(table = "_$resourceName", id = model.total, fields = fields))

    fun withEntity(it: EntityDescription): CrudApplication {
        model = model.withEntity(it)
        return this
    }

    fun newMySQLDao(dao: BasicDao, table: String) = MySQLCrudDao(model.getByTable(table), dao)

    fun autoGeneratedMySQLServices() = dao?.let { tables.map { newMySQLDao(dao, it) }.map { service(it) } } ?: listOf()

    fun service(dao: ICrudAsyncDao<JsonObject>) = CrudService(dao)

    fun modelService() = ModelService(model)                                               

    operator fun invoke(resourceName: String, fieldName: String) = model(resourceName,fieldName)
    operator fun invoke(resourceName: String) = model(resourceName)
    fun get(resourceName: String, fieldName: String) = this(resourceName, fieldName)!!
    fun get(resourceName: String) = this(resourceName)!!
}

